---
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_networking_infrastructure_services/providing-dhcp-services_networking-infrastructure-services#doc-wrapper

# The "monitor" machine has one interface on the private libvirt network.
# It uses gateway as a web proxy.
# it hosts logging and metrics services

# prometheus and grafana
# https://github.com/cloudalchemy/ansible-prometheus
# https://galaxy.ansible.com/cloudalchemy/grafana
# https://github.com/cloudalchemy/ansible-grafana
# https://github.com/redhat-cop/tower_grafana_dashboards/blob/master/metric_tower.json
#
# prereqs
# dnf install python3-jmespath
# ansible-galaxy role install cloudalchemy.prometheus
# ansible-galaxy role install cloudalchemy.grafana
# ansible-galaxy collection install community.grafana
#
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_networking_infrastructure_services/providing-dhcp-services_networking-infrastructure-services#doc-wrapper

# Use a kickstart file to install and configure the OS.


# create a few variables like "volume_image_file_exists"
- name: Add image facts to hostvars
  hosts: monitor
  become: true
  gather_facts: false
  roles:
    - name: "check for existing images"
      role: nick.platform.libvirt_image_facts
      delegate_to: "{{ groups['hypervisor'][0] }}"


# If there already is an image file, don't trash it. 
- name: Kickstart a new machine
  hosts: monitor
  become: true
  gather_facts: false
  serial: 1
  pre_tasks:
    - name: "If image exists, stop here"
      meta: end_host
      when: volume_image_file_exists
  roles:
    - name: "kickstart the VM on hypervisor {{ groups['hypervisor'][0] }}"
      role: nick.platform.libvirt_machine_kickstart
      delegate_to: "{{ groups['hypervisor'][0] }}"
  tasks:
    - name: There is now an image file
      set_fact:
        volume_image_file_exists: true


- name: Find and start new server machine
  hosts: monitor
  become: true
  gather_facts: false
  serial: 1
  roles:
    - name: "update /etc/hosts on install host {{ groups['install_host'][0] }}"
      role: nick.platform.hosts_record
      vars:
        h_ip_address: "{{ nics[0]['ip'] }}"
        h_fqdn: "{{ fqdn }}"
        h_host: "{{ host }}"
      delegate_to: "{{ groups['install_host'][0] }}"
    # !!! install_host or hypervisor? 
    - name: "run machine (it stops after install)"
      role: nick.platform.libvirt_machine_start
      delegate_to: "{{ groups['install_host'][0] }}"
      when: volume_image_file_exists


# If there is no base file, assume configuration didn't complete and 
# we are good to go again.
- name: Configure new server machine
  hosts: monitor
  become: true
  gather_facts: false
  serial: 1
  vars_files:
    - ~/vault-credentials.yml
  environment:
    http_proxy: "http://gateway.{{ lab_domain }}:3128"
    HTTPS_PROXY: "http://gateway.{{ lab_domain }}:3128"
    no_proxy: localhost,127.0.0.1,example.com
  #
  pre_tasks:
    - name: "If base image exists, stop here"
      ansible.builtin.meta: end_host
      when: volume_base_file_exists
    - ansible.builtin.setup:
  #
  roles:
    - role: nick.platform.managed_node
    - name: "update /etc/hosts with gateway address"
      role: nick.platform.hosts_record
      # !!! hardcoded
      vars:
        h_ip_address: "{{ lab_net_prefix }}.3"
        h_fqdn: "gateway.{{ lab_domain }}"
        h_host: gateway
    - role: nick.platform.server_cert
    - role: nick.platform.dns_client_of_id
    - role: nick.platform.dns_record
      vars:
        # remove domain, leave host and maybe subdomain
        # !!! hardcoded
        record_a_name: "{{ inventory_hostname | regex_replace( '.' + lab_domain) }}"
        record_a_value: "{{ nics[0]['ip'] }}"
        # use the last octet only
        record_ptr_name: "{{ nics[0]['ip'].split('.')[3] }}"
        # DNS is fussy about root domain '.'
        record_ptr_value: "{{ inventory_hostname + '.' }}"
    - role: nick.platform.cdn_repo_consumer
    - role: nick.platform.latest_packages
    - role: cloudalchemy.prometheus
      vars:
        prometheus_version: latest
    - role: cloudalchemy.grafana
      vars:
        grafana_security:
          admin_user: admin
          admin_password: redhat
        grafana_datasources:
          - name: prometheus
            type: prometheus
            access: proxy
            url: 'http://localhost:9090'
            basicAuth: false
    - nick.platform.elk_server

  tasks: 

# firewall
  # open port 9090 for prometheus
  # open port 3000 for grafana
  #
  - name: permit service traffic
    ansible.posix.firewalld:
      service: "{{ item }}"
      immediate: yes
      permanent: yes
      state: enabled
    loop: 
    - grafana
    - prometheus


# test
# prometheus - no password
# curl http://monitor.lab.example.com:9090/
# grafana - admin/redhat (see grafana_security above)
# curl http://monitor.lab.example.com:3000/
# ELK - elastic API
# http://monitor.lab.example.com:9200/
# ELK - kibana
# http://monitor.lab.example.com:5601/


- name: Keep image and config of the new machine
  hosts: monitor
  become: true
  gather_facts: false
  serial: 1
  roles: 
  # create $FQDN-base.qcow2 image and $FQDN.xml config.
  # if the $FQDN-base.qcow2 file already exists, this role does not change anything. 
  - name: "Copy the volume file and config, then delete the machine"
    role: nick.platform.libvirt_machine_image
    delegate_to: "{{ groups['hypervisor'][0] }}"
